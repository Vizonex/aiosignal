[tox]
envlist = check, clean, {py39,py310,py311,py312,py313}, report
minversion = 4


[python-cli-options]
byte-warnings = -b
byte-errors = -bb
max-isolation = -E -s -I
# some-isolation = -I
# FIXME: Python 2 shim. Is this equivalent to the above?
some-isolation = -E -s
warnings-to-errors = -Werror


[testenv]

usedevelop = True

deps =
  pytest
  pytest-asyncio
  pytest-xdist
  pytest-cov

commands =
  pytest --cov-append {posargs}


[testenv:cleanup-dists]
description =
  Wipe the the dist{/} folder
deps =
commands_pre =
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, shutil, sys; \
      dists_dir = "{toxinidir}{/}dist{/}"; \
      shutil.rmtree(dists_dir, ignore_errors=True); \
      sys.exit(os.path.exists(dists_dir))'
commands_post =
package = skip


[testenv:build-dists]
description =
  Build dists with {basepython} and put them into the dist{/} folder
depends =
  cleanup-dists
deps =
  build
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m build \
      {posargs:}
commands_post =
package = skip


[testenv:metadata-validation]
description =
  Verify that dists under the `dist{/}` dir
  have valid metadata
depends =
  build-dists
deps = -rrequirements{/}wheel.txt
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m twine \
      check \
      --strict \
      dist{/}*
commands_post =
package = skip


[testenv:pre-commit]
description =
  Run the quality checks under {basepython}; run as
  `SKIP=check-id1,check-id2 tox r -e pre-commit` to instruct the underlying
  `pre-commit` invocation avoid running said checks; Use
  `tox r -e pre-commit -- check-id1 --all-files` to select checks matching IDs
  aliases{:} `tox r -e pre-commit -- mypy --all-files` will run 3 MyPy
  invocations, but `tox r -e pre-commit -- mypy-py313 --all-files` runs one.
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m pre_commit \
      run \
      --color=always \
      --show-diff-on-failure \
      {posargs:--all-files}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'cmd = "{envpython} -m pre_commit install"; \
      scr_width = len(cmd) + 10; \
      sep = "=" * scr_width; \
      cmd_str = "    $ \{cmd\}";' \
      'print(f"\n\{sep\}\nTo install pre-commit hooks into the Git repo, run:\
      \n\n\{cmd_str\}\n\n\{sep\}\n")'
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      coverage_result_files = ",".join(\
        str(xml_path.relative_to(project_root_path)) \
        for xml_path in test_results_dir.glob("mypy--py-*{/}cobertura.xml")\
      ); \
      gh_output_fd = open(\
        os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
      ); \
      print(\
        f"cov-report-files={coverage_result_files !s}", file=gh_output_fd\
      ); \
      print("codecov-flags=MyPy", file=gh_output_fd); \
      gh_output_fd.close()'
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import itertools, os, pathlib, shlex, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      text_and_json_reports = itertools.chain( \
        test_results_dir.glob("mypy--py-*{/}*.json"), \
        test_results_dir.glob("mypy--py-*{/}*.txt"), \
      ); \
      report_contents = { \
        report{:} report.read_text() \
        for report in text_and_json_reports \
      }; \
      reports_summary_text_blob = "\n\n".join( \
        f"\N\{NUMBER SIGN\}\N\{NUMBER SIGN\} {report_path.parent.name}{:} " \
        f"`{report_path.name}`\n\n" \
        f"```{report_path.suffix[1:]}\n{report_text}\n```\n" \
        for report_path, report_text in report_contents.items() \
      ); \
      gh_summary_fd = open( \
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a", \
      ); \
      print(reports_summary_text_blob, file=gh_summary_fd); \
      gh_summary_fd.close()'
  # Print out the output coverage dir and a way to serve html:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c\
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" and sys.exit(); \
      len(sys.argv) >= 3 and all(\
        arg != "mypy" and not arg.startswith("mypy-py3") \
        for arg in sys.argv \
      ) and sys.exit(); \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      coverage_html_report_urls = [\
        f"file://\{xml_path !s\}" \
        for xml_path in test_results_dir.glob("mypy--py-*{/}index.html")\
      ]; \
      coverage_html_report_open_cmds = [\
      f"python3 -Im webbrowser \N\{QUOTATION MARK\}\{html_url !s\}\N\{QUOTATION MARK\}" \
      for html_url in coverage_html_report_urls\
      ]; \
      coverage_html_report_open_cmds_blob = "\n\n\t".join(\
        coverage_html_report_open_cmds,\
      ); \
      print(\
        f"\nTo open the HTML coverage reports, run\n\n\
        \t\{coverage_html_report_open_cmds_blob !s\}\n"\
      ); \
      print(\
        f"[*] Find rest of JSON and text reports, are in the same directories."\
      )\
      ' \
    {posargs:--all-files}
deps = -rrequirements{/}wheel.txt
isolated_build = true
package = skip
pass_env =
  {[testenv]pass_env}
  SKIP  # set this variable


[testenv:build-docs]
# NOTE: Passing the `is_unversioned` tag speeds up rebuilds in dev env
allowlist_externals =
  git
description = Build The Docs
changedir = docs{/}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m sphinx \
      -j auto \
      -b html \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -d '{temp_dir}{/}.doctrees' \
      . \
      {posargs:{envtmpdir}{/}html -t is_unversioned}
commands_post =
  # Print out the output docs dir and a way to serve html:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c\
      'import os, pathlib;\
      IS_RTD_ENV = os.getenv("READTHEDOCS", "False") == "True";\
      docs_dir = pathlib.Path(r"{envdir}") / r"{envtmpdir}" / "html";\
      index_file = docs_dir / "index.html";\
      docs_url = os.environ["READTHEDOCS_CANONICAL_URL"] if IS_RTD_ENV \
      else f"file://\{index_file\}";\
      print(f"\nTo open the documentation, run\n\n\
      \tpython3 -Im webbrowser \
      \N\{QUOTATION MARK\}\{docs_url !s\}\N\{QUOTATION MARK\}\n");\
      not IS_RTD_ENV and \
      print(f"To serve \
      the docs with a local web server, use\n\n\
      \tpython3 -Im http.server --directory \
      \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0\n")'
deps =
  -r{toxinidir}{/}requirements{/}doc.txt
pass_env =
  {[testenv]pass_env}
  READTHEDOCS*  # Present @ RTD



[testenv:check]
basepython = python3.13

deps =
  wheel
  flake8
  docutils
  pygments
  twine
  build

commands =
  flake8 aiosignal tests
  python -m build
  python -m twine check --strict dist/*

[testenv:clean]
basepython = python3.13

deps = coverage
skip_install = true

commands =
  coverage erase

[testenv:report]
basepython = python3.13

deps = coverage
skip_install = true

commands =
  coverage report
  coverage html
  {envpython} -c '\
    print("python -m webbrowser \
    \N{Apostrophe}file://{toxinidir}/htmlcov/index.html\N{Apostrophe}")\
  '
